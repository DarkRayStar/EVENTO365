{"ast":null,"code":"var _jsxFileName = \"D:\\\\SLIIT\\\\Y2 S2\\\\ITP\\\\ITP_DOWNLOADED\\\\itp_project-kdy-_2021_-wd02-main\\\\Evento365\\\\evento_frontend\\\\react-frontend\\\\src\\\\UserProfileComponents\\\\CustomerResetPassword.jsx\";\nimport React, { Component } from 'react';\nimport CustomerService from '../UserServices/CustomerService';\nimport Grid from '@material-ui/core/Grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CustomerResetPassword extends Component {\n  constructor(props) {\n    super(props);\n\n    this.saveOrUpdateCustomer = e => {\n      e.preventDefault();\n      let customer = {\n        name: this.state.name,\n        email: this.state.email,\n        address: this.state.address,\n        nic: this.state.nic,\n        username: this.state.username,\n        password: this.state.password,\n        birthday: this.state.birthday,\n        mobile: this.state.mobile,\n        reg_date: this.state.reg_date,\n        sec_ques_no: this.state.sec_ques_no,\n        sec_ques_answer: this.state.sec_ques_answer,\n        gender: this.state.gender,\n        image: this.state.image,\n        customer_type: this.state.customer_type\n      };\n      console.log('customer =>' + JSON.stringify(customer));\n\n      if (this.state.id === '_addcus') {\n        CustomerService.createCustomer(customer).then(res => {\n          this.props.history.push('/customer');\n        });\n      } else {\n        CustomerService.updateCustomer(customer, this.fetchedID).then(res => {\n          this.props.history.push('/customer-login');\n        });\n      }\n    };\n\n    this.changePasswordHandler1 = event => {\n      this.setState({\n        password: event.target.value\n      });\n    };\n\n    this.changePasswordHandler2 = event => {\n      this.setState({\n        passwordvalidate: event.target.value\n      });\n    };\n\n    this.check = e => {\n      e.preventDefault();\n      console.log(this.state.passwordvalidate);\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        sec_ques_no: e.target.value\n      });\n    };\n\n    this.validatePasswords = e => {\n      if (this.state.passwordvalidate === this.state.password) {\n        this.forceUpdate();\n        alert('Password changed successfully.');\n        this.saveOrUpdateCustomer(e);\n      } else {\n        alert('Passwords do not match.');\n      }\n    };\n\n    this.state = {\n      id: this.props.match.params.id,\n      name: '',\n      email: '',\n      address: '',\n      nic: '',\n      gender: '',\n      username: '',\n      password: '',\n      passwordvalidate: '',\n      birthday: '',\n      mobile: '',\n      reg_date: '',\n      sec_ques_no: '',\n      sec_ques_answer: '',\n      image: '',\n      customer_type: ''\n    };\n    this.fetchedID = window.location.pathname.replace(/^\\D+/g, '');\n    this.changePasswordHandler1 = this.changePasswordHandler1.bind(this);\n    this.changePasswordHandler2 = this.changePasswordHandler2.bind(this);\n    this.saveOrUpdateCustomer = this.saveOrUpdateCustomer.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.id === '_add') {\n      return;\n    } else {\n      CustomerService.getCustomerById(this.fetchedID).then(res => {\n        let customer = res.data;\n        this.setState({\n          name: customer.name,\n          email: customer.email,\n          address: customer.address,\n          nic: customer.nic,\n          username: customer.username,\n          password: customer.password,\n          birthday: customer.birthday,\n          mobile: customer.mobile,\n          sec_ques_no: customer.sec_ques_no,\n          sec_ques_answer: customer.sec_ques_answer,\n          gender: customer.gender,\n          image: customer.image,\n          customer_type: customer.customer_type\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        justify: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '450px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"blackborder transformDiv\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: this.validatePasswords,\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Reset Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"New Password :\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"password\",\n                  onChange: this.changePasswordHandler1,\n                  className: \"form-control\",\n                  placeholder: \"New Password\",\n                  pattern: \"(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\",\n                  title: \"Must contain at least one  number and one uppercase and lowercase letter, and at least 8 or more characters\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Re-enter Password :\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"password\",\n                  onChange: this.changePasswordHandler2,\n                  className: \"form-control\",\n                  placeholder: \"New Password\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"userButtons\",\n                children: \"CHANGE PASSWORD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 39\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CustomerResetPassword;","map":{"version":3,"sources":["D:/SLIIT/Y2 S2/ITP/ITP_DOWNLOADED/itp_project-kdy-_2021_-wd02-main/Evento365/evento_frontend/react-frontend/src/UserProfileComponents/CustomerResetPassword.jsx"],"names":["React","Component","CustomerService","Grid","CustomerResetPassword","constructor","props","saveOrUpdateCustomer","e","preventDefault","customer","name","state","email","address","nic","username","password","birthday","mobile","reg_date","sec_ques_no","sec_ques_answer","gender","image","customer_type","console","log","JSON","stringify","id","createCustomer","then","res","history","push","updateCustomer","fetchedID","changePasswordHandler1","event","setState","target","value","changePasswordHandler2","passwordvalidate","check","handleChange","validatePasswords","forceUpdate","alert","match","params","window","location","pathname","replace","bind","componentDidMount","getCustomerById","data","render","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CustomerService from '../UserServices/CustomerService';\nimport Grid from '@material-ui/core/Grid';\n\n\n\n\n\nclass CustomerResetPassword extends Component {\n\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n\n            id: this.props.match.params.id,\n            name: '',\n            email: '',\n            address: '',\n            nic: '',\n            gender: '',\n            username: '',\n            password: '',\n            passwordvalidate: '',\n            birthday: '',\n            mobile: '',\n            reg_date: '',\n            sec_ques_no: '',\n            sec_ques_answer: '',\n            image: '',\n            customer_type: ''\n        }\n\n        this.fetchedID = window.location.pathname.replace(/^\\D+/g, '');\n        this.changePasswordHandler1 = this.changePasswordHandler1.bind(this);\n        this.changePasswordHandler2 = this.changePasswordHandler2.bind(this);\n        this.saveOrUpdateCustomer = this.saveOrUpdateCustomer.bind(this);\n    }\n\n    componentDidMount() {\n\n\n\n        if (this.id === '_add') {\n            return\n        } else {\n            CustomerService.getCustomerById(this.fetchedID).then((res) => {\n                let customer = res.data;\n                this.setState({\n                    name: customer.name,\n                    email: customer.email,\n                    address: customer.address,\n                    nic: customer.nic,\n                    username: customer.username,\n                    password: customer.password,\n                    birthday: customer.birthday,\n                    mobile: customer.mobile,\n                    sec_ques_no: customer.sec_ques_no,\n                    sec_ques_answer: customer.sec_ques_answer,\n                    gender: customer.gender,\n                    image: customer.image,\n                    customer_type: customer.customer_type\n\n                })\n            });\n        }\n    }\n\n    saveOrUpdateCustomer = (e) => {\n        e.preventDefault();\n        let customer = {\n            name: this.state.name, email: this.state.email, address: this.state.address, nic: this.state.nic,\n            username: this.state.username, password: this.state.password, birthday: this.state.birthday, mobile: this.state.mobile,\n            reg_date: this.state.reg_date, sec_ques_no: this.state.sec_ques_no, sec_ques_answer: this.state.sec_ques_answer,\n            gender: this.state.gender, image: this.state.image, customer_type: this.state.customer_type\n        };\n        console.log('customer =>' + JSON.stringify(customer));\n\n        if (this.state.id === '_addcus') {\n            CustomerService.createCustomer(customer).then(res => {\n                this.props.history.push('/customer');\n            });\n        } else {\n            CustomerService.updateCustomer(customer, this.fetchedID).then(res => {\n                this.props.history.push('/customer-login');\n            });\n        }\n    }\n\n\n    changePasswordHandler1 = (event) => {\n        this.setState({ password: event.target.value });\n    }\n\n    changePasswordHandler2 = (event) => {\n        this.setState({ passwordvalidate: event.target.value });\n\n    }\n\n    check = (e) => {\n        e.preventDefault();\n        console.log(this.state.passwordvalidate);\n    }\n\n\n    handleChange = (e) => {\n        this.setState({\n            sec_ques_no: e.target.value\n        })\n    }\n\n    validatePasswords = (e) => {\n        if (this.state.passwordvalidate === this.state.password) {\n            this.forceUpdate();\n            alert('Password changed successfully.');\n            this.saveOrUpdateCustomer(e);\n        } else {\n            alert('Passwords do not match.');\n        }\n    }\n\n\n\n\n    render() {\n        return (\n            <div>\n                <br />\n\n                <Grid container spacing={2} justify=\"center\">\n                    <div style={{ width: '450px' }}>\n\n                        <fieldset className=\"blackborder transformDiv\">\n                            <form onSubmit={this.validatePasswords}>\n                                <h3>Reset Password</h3>\n                                <br />\n\n                                <div className=\"form-group\">\n                                    <label>New Password :</label>\n                                    <input type=\"password\" onChange={this.changePasswordHandler1} className=\"form-control\" placeholder=\"New Password\" pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n                                            title=\"Must contain at least one  number and one uppercase and lowercase letter, and at least 8 or more characters\" required/>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label>Re-enter Password :</label>\n                                    <input type=\"password\" onChange={this.changePasswordHandler2} className=\"form-control\" placeholder=\"New Password\" required/>\n                                </div>\n\n                                <br />\n\n                                <button type=\"submit\"  className=\"userButtons\">CHANGE PASSWORD</button>\n                                <br /><br />\n\n                            </form>\n                        </fieldset>\n                    </div>\n                </Grid>\n                <br /><br /><br />\n            </div>\n\n        );\n    }\n\n}\n\nexport default CustomerResetPassword;"]},"metadata":{},"sourceType":"module"}